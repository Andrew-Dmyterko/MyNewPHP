<!--<pre>-->
<?php
/**
 * Задание 1
 *
 * Дан массив с числами. Найдите среднее арифметическое его элементов
 * (сумма элементов делить на количество) не используя цикл.
 *
 */

$arr = [10,2,5,6,7,8,0,33,56,4467,1];

$average = array_sum($arr)/count($arr);

var_dump($arr);
echo "Среднее арифметическое массива: ".$average;

echo "<hr>";

/**
 * Задание 2
 *
 * Дана строка с числами '1234567890'.
 * Найдите сумму пар чисел: 12+34+56+78+90. Решите задачу, не используя цикл.
 *
 */

$str = '1234567890';

$sum = array_sum(str_split($str, 2));
echo $sum;

echo "<hr>";

/**
 * Задание 3
 *
 * Спросите возраст пользователя. Если форма была отправлена и введен возраст,
 * то выведите его на экран, а форму уберите. Если же форма не была отправлена
 * (это будет при первом заходе на страницу) - просто покажите ее.
 *
 */

if (!isset($_POST['age']) || empty($_POST['age'])) { ?>
    <form method="POST" action="homework12.php">
        <div>
            <input type="text" name="age" placeholder="Age">
        </div>
        <div>
            <button type="submit">submit</button>
        </div>
    </form>
<?php } else {
    echo "Ваш возраст - ".$_POST['age'];
}

echo "<hr>";

/**
 * Задание 4
 *
 * Дано число, например 31 (случайное число).
 * Проверьте, что это число не делится ни на одно другое число кроме себя самого и единицы.
 * То есть в нашем случае нужно проверить, что число 31 не делится на все числа от 2 до 30.
 * Если число не делится - выведите 'нет', а если делится - выведите 'да'.
 *
 */

$num = rand(1,1000);
//$num = 43;

$d = 'Нет';
// false true -
for ($i=2; $i<=$num-1; $i++) {
    if (!($num%$i)) {
        $d = 'Да';
    }
}

echo "Число $num - $d";

echo "<hr>";
echo "через gmp_prob_prime<br>";
echo "Число $num - ";
echo gmp_prob_prime($num) ? "Нет" : "Да";

echo "<hr>";

/**
 * Задание 5
 *
 * С помощью двух вложенных циклов нарисуйте следующую пирамидку:
 * 1
 * 22
 * 333
 * 4444
 * 55555
 * 666666
 * 7777777
 * 88888888
 * 999999999
 *
 */

for ($i = 1; $i <=9; $i++) {
    for ($j = 1; $j <=$i; $j++) {
        echo $i;
    }
    echo "<br>";
}

echo "<hr>";

/**
 * Задача 6
 *
 * Дан массив с числами. Создайте из него новый массив, где останутся лежать только положительные числа.
 * Создайте для этого вспомогательную функцию isPositive,
 * которая параметром будет принимать число
 * и возвращать true, если число положительное, и false - если отрицательное.
 *
 */

$arr = [5,6,78,-1,-8,5,-3,-5,10];
$newArr = [];


foreach ( $arr as $val) {
    if (isPositive($val)) {
        $newArr[] = $val;
    }
}

function isPositive($a) {
    if ($a > 0) {
        return true;
    } else return false;
}

print_r($arr);
print_r($newArr);

echo "<hr>";

/**
 * Задача 7
 *
 * Сделайте функцию getCommonDivisors, которая параметром принимает 2 числа,
 * а возвращает массив их общих делителей.
 * Для этого используйте вспомогательную функцию getDivisors из предыдущей задачи.
 *
 */

$a = 3000;
$b = 4000;

print_r(getCommonDivisors($a, $b));

function getCommonDivisors($a, $b) {
    $div = [];

    for ($i = 2; $i <= min($a, $b); $i++) {
        if (!($a % $i) && !($b % $i)) {
            $div[] = $i;
        }
    }
    return $div;
}

echo "<hr>";

/**
 * Задача 8
 *
 * Сделайте функцию, которая принимает строку на русском языке, а возвращает ее транслит.
 *
 */

function myTranslit($text) {
    $str = '';
    $text = preg_split('//u', $text, -1, PREG_SPLIT_NO_EMPTY); // класс

    $arr= [
        'а' 	=> 'a',
        'б'		=> 'b',
        'в'		=> 'v',
        'г'		=> 'g',
        'д'		=> 'd',
        'е'		=> 'e',
        'ё'		=> 'jo',
        'ж'		=> 'zh',
        'з'		=> 'z',
        'и'		=> 'i',
        'й'		=> 'j',
        'к'		=> 'k',
        'л'		=> 'l',
        'м'		=> 'm',
        'н'		=> 'n',
        'о'		=> 'o',
        'п'		=> 'p',
        'р'		=> 'r',
        'с'		=> 's',
        'т'		=> 't',
        'у'		=> 'u',
        'ф'		=> 'f',
        'х'		=> 'h',
        'ц'		=> 'cz',
        'ч'		=> 'ch',
        'ш'		=> 'sh',
        'щ'		=> 'sch',
        'ь'		=> '`',
        'ы'		=> 'y',
        'ъ'		=> '``',
        'э'		=> 'e',
        'ю'		=> 'yu',
        'я'		=> 'ya',
        ' '		=> ' ',
        'А' 	=> 'A',
        'Б'		=> 'B',
        'В'		=> 'V',
        'Г'		=> 'G',
        'Д'		=> 'D',
        'Е'		=> 'E',
        'Ё'		=> 'Jo',
        'Ж'		=> 'Zh',
        'З'		=> 'Z',
        'И'		=> 'I',
        'Й'		=> 'J',
        'К'		=> 'K',
        'Л'		=> 'L',
        'М'		=> 'M',
        'Н'		=> 'N',
        'О'		=> 'O',
        'П'		=> 'P',
        'Р'		=> 'R',
        'С'		=> 'S',
        'Т'		=> 'T',
        'У'		=> 'U',
        'Ф'		=> 'F',
        'Х'		=> 'H',
        'Ц'		=> 'Cz',
        'Ч'		=> 'Ch',
        'Ш'		=> 'Sh',
        'Щ'		=> 'Sсh',
        'Ь'		=> '`',
        'Ы'		=> 'Y',
        'Ъ'		=> '``',
        'Э'		=> 'E',
        'Ю'		=> 'Yu',
        'Я'		=> 'Ya',
        ','		=> ',',
        '.'		=> '.',
        '!'		=> '!',
        '?'		=> '?'
    ];

    foreach ($text as $key => $val) {

        $str = $str.$arr[$val];

    }

    return $str;
}
$str = 'Это прошто текст для проверки транслита щука Щука';
echo $str."<br>";
echo myTranslit($str);

echo "<hr>";

/**
 * Задача 9
 *
 * Сделайте аналог функции sort().
 * Помните мы делали, функцию которая работала, как функция min(), то есть разбирали, что под капотом.
 *
 */

$arr1 = [
    'привет',
    'вася',
    'зоря',
    'зомби',
    'заяц',
    '50',
    'я50',
    'ааа',
    'AAA',
    'AA',
    'аааа',
    'ааааФ',
    'а',
    'ав',
    'авв'];

$arr2 = $arr1;

echo "Сортировка через sort<br>";
sort($arr2);
print_r($arr2);

$array_length = count($arr1);

for($x = 0; $x < $array_length; $x++) {

    for($y = 0; $y < $array_length; $y++) {

        if(strcmp($arr1[$x],$arr1[$y])<0) {
            $acum = $arr1[$x];
            $arr1[$x] = $arr1[$y];
            $arr1[$y] = $acum;
        }
    }
}
echo "<br>Сортировка через самописную функцию<br>";
print_r($arr1);

echo "<hr>";

/**
 * Задача 10
 *
 * Дан массив со строками. Запишите в новый массив только те строки, которые начинаются с 'http://'.
 *
 *
 */

$url = [
     'http://google.com',
     'привет',
     'вапкп',
     'пиптпт',
     'http/',
     'http:/',
     'http://vvv.com',
     'http://youtube.com',
     'vfvfv',
     'h/ttp:/',
     'bbb',
     'hythy',
     'trgtrg'
];

//foreach ($url as $value) {
//    preg_match('#^http://#', $value, $matches);
//}

$matches = preg_grep('#^(http://[\w.-]+)#', $url);

var_dump($matches);
